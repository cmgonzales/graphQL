
    type Query {
        me: User!
        post: Post!
        comments:[Comment]!
        users(query: String!): [User!]!
        posts(query: String!): [Post!]  
    }

    type Mutation{
        createUser(data: CreateUserInput!): User!
        deleteUser(id: ID, data: updateUser): User!
        deletePost(id: ID): Post!
        updateUser(id: ID!, data: ): User!
        upatePost(id: ID! data: upatePost): Post!
        deleteComment(id: ID): Comment!
        updateComment(id: ID, data: updateComment): Comment!
        createPost(data: CreatePostInput!): Post!
        createComment(data:CreateCommentInput): Comment!
    }

    type Subscription{
   
        comment(poseID: ID): Comment!
        post: Post!
    }

    input CreateUserInput{
        name: String!
        email: String!
        age: Int
    }

    input UdateUserInput{
        name: String!
        email: String!
        age: Int
    }
    input CreatePostInput{
        title: String!
        body: String!
        published: Boolean!
        author: ID
    }

    input upatePost {
        title: String
        body: String
        published: Boolean
    }

    input CreateCommentInput{
        text: String!
        author:ID
        post: ID
    }

    input updateCommentInput{
        text: String!

    }

    type User{
        id: ID
        name: String!
        email: String!
        age: Int
        post: [Post!]!
        comment: [Comment!]!
    }

    type Post{
        id: ID
        title: String!
        body: String!
        published: Int
        author: User!
        comment: [Comment!]!
    }
    type Comment{
        id: ID!
        text: String!
        author: User!
        post: Post!
    }
type PostSubscriptionPayload{
    
}
